// <auto-generated />
#nullable enable

using System.Text;
using Microsoft.CodeAnalysis;

namespace Raiqub.Generators.T4CodeWriter
{
    /// <summary>Base class for code writers that generate compilation source.</summary>
    /// <typeparam name="T">The type of the model associated with the code writer.</typeparam>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.T4CodeWriter", GeneratorInfo.Version)]
    public abstract class CodeWriterBase<T> : CodeWriterBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeWriterBase{T}"/> class with a <see cref="StringBuilder"/>.
        /// </summary>
        /// <param name="builder">The StringBuilder object used for building the template.</param>
        /// <param name="charsPerIndentation">The number of characters per indentation level.</param>
        protected CodeWriterBase(StringBuilder builder, int charsPerIndentation = CharsPerIndentation)
            : base(builder, charsPerIndentation)
        {
        }

        /// <summary>Gets or sets the model associated with the code writer.</summary>
        public T Model { get; protected set; } = default!;

        /// <summary>Adds a source to the compilation based on the provided model.</summary>
        /// <param name="context">The source production context.</param>
        /// <param name="model">The model to generate source for.</param>
        public void GenerateCompilationSource(SourceProductionContext context, T model)
        {
            if (!CanGenerateFor(model))
                return;

            Model = model;
            base.GenerateCompilationSource(context);
            Model = default!;
        }

        /// <summary>Determines whether the code writer can generate source for the specified model.</summary>
        /// <param name="model">The model to check.</param>
        /// <returns><c>true</c> if source can be generated for the model; otherwise, <c>false</c>.</returns>
        protected virtual bool CanGenerateFor(T model) => true;
    }
}
