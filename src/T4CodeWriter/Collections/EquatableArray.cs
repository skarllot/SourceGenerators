// <auto-generated />
#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.CompilerServices;

/*
 * References:
 * - https://github.com/CommunityToolkit/dotnet/blob/657c6971a8d42655c648336b781639ed96c2c49f/src/CommunityToolkit.Mvvm.SourceGenerators/Helpers/EquatableArray%7BT%7D.cs
 * - https://github.com/andrewlock/NetEscapades.EnumGenerators/blob/0625536ff6d085b0c148c363d2df08756f4860d6/src/NetEscapades.EnumGenerators/EquatableArray.cs
 */

namespace Raiqub.Generators.T4CodeWriter.Collections
{
    /// <summary>
    /// Extensions for <see cref="EquatableArray{T}"/>.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.T4CodeWriter", GeneratorInfo.Version)]
    public static class EquatableArray
    {
        /// <summary>
        /// Creates an <see cref="EquatableArray{T}"/> instance from a given <see cref="ImmutableArray"/>.
        /// </summary>
        /// <typeparam name="T">The type of items in the input array.</typeparam>
        /// <param name="array">The input <see cref="ImmutableArray{T}"/> instance.</param>
        /// <returns>An <see cref="EquatableArray{T}"/> instance from a given <see cref="ImmutableArray{T}"/>.</returns>
        public static EquatableArray<T> AsEquatableArray<T>(this ImmutableArray<T> array)
            where T : IEquatable<T>
        {
            return new EquatableArray<T>(array);
        }

        /// <summary>
        /// Creates an <see cref="EquatableArray{T}"/> instance from a given array.
        /// </summary>
        /// <typeparam name="T">The type of items in the input array.</typeparam>
        /// <param name="array">The input array instance.</param>
        /// <returns>An <see cref="EquatableArray{T}"/> instance from a given array.</returns>
        public static EquatableArray<T> ToEquatableArray<T>(this T[] array)
            where T : IEquatable<T>
        {
            return EquatableArray<T>.FromArray(array);
        }
    }

    /// <summary>
    /// An immutable, equatable array. This is equivalent to <see cref="ImmutableArray{T}"/> but with value equality support.
    /// </summary>
    /// <typeparam name="T">The type of values in the array.</typeparam>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.T4CodeWriter", GeneratorInfo.Version)]
    public readonly struct EquatableArray<T> : IEquatable<EquatableArray<T>>, IEnumerable<T>
        where T : IEquatable<T>
    {
        /// <summary>
        /// The underlying <typeparamref name="T"/> array.
        /// </summary>
        private readonly T[]? _array;

        /// <summary>
        /// Creates a new <see cref="EquatableArray{T}"/> instance.
        /// </summary>
        /// <param name="array">The input <see cref="ImmutableArray{T}"/> to wrap.</param>
        public EquatableArray(ImmutableArray<T> array)
        {
            _array = Unsafe.As<ImmutableArray<T>, T[]?>(ref array);
        }

        private EquatableArray(T[]? array) => _array = array;

        /// <summary>
        /// Gets a reference to an item at a specified position within the array.
        /// </summary>
        /// <param name="index">The index of the item to retrieve a reference to.</param>
        /// <returns>A reference to an item at a specified position within the array.</returns>
        public ref readonly T this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => ref _array![index];
        }

        /// <summary>
        /// Gets a value indicating whether the current array is empty.
        /// </summary>
        public bool IsEmpty
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                EquatableArray<T> self = this;
                return self._array == null || self._array.Length == 0;
            }
        }

        /// <sinheritdoc/>
        public bool Equals(EquatableArray<T> array)
        {
            return _array.AsSpan().SequenceEqual(array._array.AsSpan());
        }

        /// <sinheritdoc/>
        public override bool Equals([NotNullWhen(true)] object? obj)
        {
            return obj is EquatableArray<T> array && this.Equals(array);
        }

        /// <sinheritdoc/>
        public override int GetHashCode()
        {
            var array = _array;
            if (array == null)
            {
                return 0;
            }

            HashCode hashCode = default;

            foreach (T item in array)
            {
                hashCode.Add(item);
            }

            return hashCode.ToHashCode();
        }

        /// <summary>
        /// Gets an <see cref="ImmutableArray{T}"/> instance from the current <see cref="EquatableArray{T}"/>.
        /// </summary>
        /// <returns>The <see cref="ImmutableArray{T}"/> from the current <see cref="EquatableArray{T}"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImmutableArray<T> AsImmutableArray()
        {
            return Unsafe.As<T[]?, ImmutableArray<T>>(ref Unsafe.AsRef(in _array));
        }

        /// <summary>
        /// Gets an <see cref="IEnumerable{T}"/> instance from the current <see cref="EquatableArray{T}"/>.
        /// </summary>
        /// <returns>The <see cref="IEnumerable{T}"/> from the current <see cref="EquatableArray{T}"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IEnumerable<T> AsEnumerable()
        {
            return _array ?? Enumerable.Empty<T>();
        }

        /// <summary>
        /// Creates an <see cref="EquatableArray{T}"/> instance from a given <see cref="ImmutableArray{T}"/>.
        /// </summary>
        /// <param name="array">The input <see cref="ImmutableArray{T}"/> instance.</param>
        /// <returns>An <see cref="EquatableArray{T}"/> instance from a given <see cref="ImmutableArray{T}"/>.</returns>
        public static EquatableArray<T> FromImmutableArray(ImmutableArray<T> array)
        {
            return new EquatableArray<T>(array);
        }

        /// <summary>
        /// Creates an <see cref="EquatableArray{T}"/> instance from a given array copy.
        /// </summary>
        /// <param name="array">The input array instance.</param>
        /// <returns>An <see cref="EquatableArray{T}"/> instance from a given array.</returns>
        public static EquatableArray<T> FromArray(T[] array)
        {
            return new EquatableArray<T>(ImmutableArray.Create(array));
        }

        /// <summary>
        /// Creates an <see cref="EquatableArray{T}"/> instance from a given array without copying (unsafe).
        /// </summary>
        /// <param name="array">The input array instance.</param>
        /// <returns>An <see cref="EquatableArray{T}"/> instance from a given array.</returns>
        public static EquatableArray<T> FromArrayWithoutCopy(T[] array)
        {
            return new EquatableArray<T>(array);
        }

        /// <summary>
        /// Returns a <see cref="ReadOnlySpan{T}"/> wrapping the current items.
        /// </summary>
        /// <returns>A <see cref="ReadOnlySpan{T}"/> wrapping the current items.</returns>
        public ReadOnlySpan<T> AsSpan()
        {
            return _array.AsSpan();
        }

        /// <summary>
        /// Copies the contents of this <see cref="EquatableArray{T}"/> instance to a mutable array.
        /// </summary>
        /// <returns>The newly instantiated array.</returns>
        public T[] ToArray()
        {
            return (T[]?)_array?.Clone() ?? Array.Empty<T>();
        }

        /// <summary>
        /// Gets an <see cref="ImmutableArray{T}.Enumerator"/> value to traverse items in the current array.
        /// </summary>
        /// <returns>An <see cref="ImmutableArray{T}.Enumerator"/> value to traverse items in the current array.</returns>
        public ImmutableArray<T>.Enumerator GetEnumerator()
        {
            return AsImmutableArray().GetEnumerator();
        }

        /// <sinheritdoc/>
        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            return ((IEnumerable<T>)AsImmutableArray()).GetEnumerator();
        }

        /// <sinheritdoc/>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return ((IEnumerable)AsImmutableArray()).GetEnumerator();
        }

        /// <summary>
        /// Implicitly converts an <see cref="ImmutableArray{T}"/> to <see cref="EquatableArray{T}"/>.
        /// </summary>
        /// <returns>An <see cref="EquatableArray{T}"/> instance from a given <see cref="ImmutableArray{T}"/>.</returns>
        public static implicit operator EquatableArray<T>(ImmutableArray<T> array)
        {
            return FromImmutableArray(array);
        }

        /// <summary>
        /// Implicitly converts an <see cref="EquatableArray{T}"/> to <see cref="ImmutableArray{T}"/>.
        /// </summary>
        /// <returns>An <see cref="ImmutableArray{T}"/> instance from a given <see cref="EquatableArray{T}"/>.</returns>
        public static implicit operator ImmutableArray<T>(EquatableArray<T> array)
        {
            return array.AsImmutableArray();
        }

        /// <summary>
        /// Checks whether two <see cref="EquatableArray{T}"/> values are the same.
        /// </summary>
        /// <param name="left">The first <see cref="EquatableArray{T}"/> value.</param>
        /// <param name="right">The second <see cref="EquatableArray{T}"/> value.</param>
        /// <returns>Whether <paramref name="left"/> and <paramref name="right"/> are equal.</returns>
        public static bool operator ==(EquatableArray<T> left, EquatableArray<T> right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Checks whether two <see cref="EquatableArray{T}"/> values are not the same.
        /// </summary>
        /// <param name="left">The first <see cref="EquatableArray{T}"/> value.</param>
        /// <param name="right">The second <see cref="EquatableArray{T}"/> value.</param>
        /// <returns>Whether <paramref name="left"/> and <paramref name="right"/> are not equal.</returns>
        public static bool operator !=(EquatableArray<T> left, EquatableArray<T> right)
        {
            return !left.Equals(right);
        }
    }
}
