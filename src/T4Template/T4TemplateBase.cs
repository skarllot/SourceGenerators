// <auto-generated />
#nullable enable

using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

#if IS_T4_TEMPLATE_BASE
namespace Raiqub.T4Template
{
    /// <summary>Represents the base class for T4 templates.</summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.T4Template", "1.1.0.0")]
    public abstract partial class T4TemplateBase
#else
namespace Raiqub.Generators.T4CodeWriter
{
    public abstract partial class CodeWriterBase
#endif
    {
        private const char IndentationChar = ' ';

        /// <summary>Represents the number of characters per indentation level.</summary>
        protected const int CharsPerIndentation = 4;

        private readonly StringBuilder _builder;
        private readonly int _charsPerIndentation;
        private int _indentation;

#if IS_T4_TEMPLATE_BASE
        /// <summary>
        /// Initializes a new instance of the T4TemplateBase class.
        /// </summary>
        /// <param name="charsPerIndentation">The number of characters per indentation level.</param>
        protected T4TemplateBase(int charsPerIndentation = CharsPerIndentation)
        {
            _builder = new StringBuilder();
            _charsPerIndentation = charsPerIndentation;
        }

        /// <summary>
        /// Initializes a new instance of the T4TemplateBase class with a StringBuilder.
        /// </summary>
        /// <param name="builder">The StringBuilder object used for building the template.</param>
        /// <param name="charsPerIndentation">The number of characters per indentation level.</param>
        protected T4TemplateBase(StringBuilder builder, int charsPerIndentation = CharsPerIndentation)
        {
            _builder = builder;
            _charsPerIndentation = charsPerIndentation;
        }
#endif

        /// <summary>Gets or sets the string builder that generation-time code is using to assemble generated output.</summary>
        protected StringBuilder GenerationEnvironment => _builder;

        /// <summary>
        /// Gets the helper class for producing culture-oriented representations of objects as strings.
        /// </summary>
        protected ToStringInstanceHelper ToStringHelper
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => ToStringInstanceHelper.Instance;
        }

        private bool EndsWithNewLine => _builder.Length > 0 && _builder[^1] == '\n';

        /// <summary>Create the source text from current T4 template state.</summary>
        /// <returns>The transformed text.</returns>
        public abstract string TransformText();

        /// <summary>Remove the specified number of characters from written text.</summary>
        /// <param name="numberOfChars">The number of characters to remove from the end of the string.</param>
        protected void Rewind(int numberOfChars)
        {
            _builder.Length -= numberOfChars;
        }

        /// <summary>Write the string representation of a specified boolean value directly into the generated output.</summary>
        /// <param name="value">The boolean to be appended to the generated output.</param>
        protected void Write(bool value)
        {
            if (_indentation == 0)
            {
                _builder.Append(value);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(value);
        }

        /// <summary>Write character directly into the generated output.</summary>
        /// <param name="value">The character to be appended to the generated output.</param>
        protected void Write(char value)
        {
            if (_indentation == 0)
            {
                _builder.Append(value);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(byte number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(sbyte number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(short number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(ushort number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(int number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(uint number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(long number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(ulong number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(float number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(double number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(decimal number)
        {
            if (_indentation == 0)
            {
                _builder.Append(number);
                return;
            }

            if (EndsWithNewLine)
                WriteIndentation();

            _builder.Append(number);
        }

        /// <summary>Write the string representation of a specified boolean value directly into the generated output.</summary>
        /// <param name="value">The boolean to be appended to the generated output.</param>
        protected void Write(bool? value)
        {
            if (value is null)
            {
                return;
            }

            Write(value.Value);
        }

        /// <summary>Write character directly into the generated output.</summary>
        /// <param name="value">The character to be appended to the generated output.</param>
        protected void Write(char? value)
        {
            if (value is null)
            {
                return;
            }

            Write(value.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(byte? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(sbyte? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(short? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(ushort? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(int? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(uint? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(long? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(ulong? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(float? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(double? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write number directly into the generated output.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected void Write(decimal? number)
        {
            if (number is null)
            {
                return;
            }

            Write(number.Value);
        }

        /// <summary>Write the string representation of a specified object directly into the generated output.</summary>
        /// <param name="value">The object to be appended to the generated output.</param>
        protected void Write(object? value)
        {
            if (value is null)
            {
                return;
            }

            Write(value.ToString());
        }

        /// <summary>Write text directly into the generated output.</summary>
        /// <param name="textToAppend">The text to be appended to the generated output.</param>
        protected void Write(string? textToAppend)
        {
            Write(textToAppend.AsSpan());
        }

        /// <summary>Write text directly into the generated output.</summary>
        /// <param name="textToAppend">The text to be appended to the generated output.</param>
        protected void Write(ReadOnlySpan<char> textToAppend)
        {
            if (textToAppend.IsEmpty)
            {
                return;
            }

            if (_builder.Length == 0)
            {
                textToAppend = textToAppend.TrimStart("\r\n".AsSpan());
            }

            if (_indentation == 0)
            {
                _builder.Append(textToAppend);
                return;
            }

            bool endsWithNewline = EndsWithNewLine;
            bool isFinalLine;
            var remainingText = textToAppend;
            while (true)
            {
                var nextLine = GetNextLine(ref remainingText, out isFinalLine);

                if (endsWithNewline && nextLine.Length > 0)
                    WriteIndentation();

                _builder.Append(nextLine);

                if (isFinalLine)
                    return;

                _builder.AppendLine();
                endsWithNewline = true;
            }
        }

        /// <summary>Writes the specified interpolated string directly into the generated output.</summary>
        /// <param name="handler">The interpolated string to append.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void Write([InterpolatedStringHandlerArgument("")] ref WriteInterpolatedStringHandler handler)
        {
            // Text is written using interpolated string handler by compiler generated code
        }

        /// <summary>Does nothing.</summary>
        /// <param name="none">An instance of the None struct.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void Write(None none)
        {
            // Text was already been written using interpolated string handler
            // Nothing to do
        }

        /// <summary>Appends a new line into the generated output.</summary>
        protected void WriteLine()
        {
            _builder.AppendLine();
        }

        /// <summary>Write boolean directly into the generated output and appends a new line.</summary>
        /// <param name="value">The boolean to be written.</param>
        protected void WriteLine(bool? value)
        {
            Write(value);
            _builder.AppendLine();
        }

        /// <summary>Write character directly into the generated output and appends a new line.</summary>
        /// <param name="value">The character to be written.</param>
        protected void WriteLine(char? value)
        {
            Write(value);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(byte? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(sbyte? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(short? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(ushort? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(int? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(uint? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(long? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(ulong? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(float? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(double? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write number directly into the generated output and appends a new line.</summary>
        /// <param name="number">The number to be written.</param>
        protected void WriteLine(decimal? number)
        {
            Write(number);
            _builder.AppendLine();
        }

        /// <summary>Write text directly into the generated output and appends a new line.</summary>
        /// <param name="textToAppend">The text to be written.</param>
        protected void WriteLine(string? textToAppend)
        {
            Write(textToAppend);
            _builder.AppendLine();
        }

        /// <summary>Write text directly into the generated output and appends a new line.</summary>
        /// <param name="value">The text to be written.</param>
        protected void WriteLine(object? value)
        {
            Write(value);
            _builder.AppendLine();
        }

        /// <summary>Writes the specified interpolated string directly into the generated output and appends a new line.</summary>
        /// <param name="handler">The interpolated string to append.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void WriteLine([InterpolatedStringHandlerArgument("")] ref WriteInterpolatedStringHandler handler)
        {
            // Text is written using interpolated string handler by compiler generated code
            _builder.AppendLine();
        }

        /// <summary>Append boolean directly into the generated output for expression control blocks.</summary>
        /// <param name="value">The boolean to be appended to the generated output.</param>
        protected None Append(bool value)
        {
            Write(value);
            return default;
        }

        /// <summary>Append character directly into the generated output for expression control blocks.</summary>
        /// <param name="value">The character to be appended to the generated output.</param>
        protected None Append(char value)
        {
            Write(value);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(byte number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(sbyte number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(short number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(ushort number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(int number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(uint number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(long number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(ulong number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(float number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(double number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(decimal number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append boolean directly into the generated output for expression control blocks.</summary>
        /// <param name="value">The boolean to be appended to the generated output.</param>
        protected None Append(bool? value)
        {
            Write(value);
            return default;
        }

        /// <summary>Append character directly into the generated output for expression control blocks.</summary>
        /// <param name="value">The character to be appended to the generated output.</param>
        protected None Append(char? value)
        {
            Write(value);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(byte? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(sbyte? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(short? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(ushort? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(int? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(uint? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(long? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(ulong? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(float? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(double? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append number directly into the generated output for expression control blocks.</summary>
        /// <param name="number">The number to be appended to the generated output.</param>
        protected None Append(decimal? number)
        {
            Write(number);
            return default;
        }

        /// <summary>Append text directly into the generated output for expression control blocks.</summary>
        /// <param name="textToAppend">The text to be appended to the generated output.</param>
        protected None Append(string? textToAppend)
        {
            Write(textToAppend);
            return default;
        }

        /// <summary>Append object value directly into the generated output for expression control blocks.</summary>
        /// <param name="value">The object value to be appended to the generated output.</param>
        protected None Append(object? value)
        {
            Write(value);
            return default;
        }

        /// <summary>Append the specified interpolated string directly into the generated output for expression control blocks.</summary>
        /// <param name="handler">The interpolated string to append.</param>
        protected None Append([InterpolatedStringHandlerArgument("")] ref WriteInterpolatedStringHandler handler)
        {
            // Text is written using interpolated string handler by compiler generated code
            return default;
        }

        /// <summary>Increase the indent.</summary>
        /// <param name="levels">The number of levels to increase.</param>
        protected void PushIndent(int levels = 1)
        {
            _indentation += levels;
        }

        /// <summary>Remove the last indent that was added with <see cref="PushIndent"/>.</summary>
        /// <param name="levels">The number of levels to decrease.</param>
        protected void PopIndent(int levels = 1)
        {
            if (_indentation - levels < 0)
            {
                Throw();
                static void Throw() => throw new InvalidOperationException("Indentation cannot decrease below zero");
            }

            _indentation -= levels;
        }

        /// <summary>Remove all characters from template state.</summary>
        protected void ClearAllText()
        {
            _builder.Clear();
            ClearIndent();
        }

        /// <summary>Remove any indentation.</summary>
        protected void ClearIndent()
        {
            _indentation = 0;
        }

        private void WriteIndentation()
        {
            _builder.Append(IndentationChar, _charsPerIndentation * _indentation);
        }

        private static ReadOnlySpan<char> GetNextLine(ref ReadOnlySpan<char> remainingText, out bool isFinalLine)
        {
            if (remainingText.IsEmpty)
            {
                isFinalLine = true;
                return default;
            }

            ReadOnlySpan<char> next;
            ReadOnlySpan<char> rest;

            int lineLength = remainingText.IndexOf('\n');
            if (lineLength == -1)
            {
                lineLength = remainingText.Length;
                isFinalLine = true;
                rest = default;
            }
            else
            {
                rest = remainingText.Slice(lineLength + 1);
                isFinalLine = false;
            }

            if ((uint)lineLength > 0 && remainingText[lineLength - 1] == '\r')
            {
                lineLength--;
            }

            next = remainingText.Slice(0, lineLength);
            remainingText = rest;
            return next;
        }

        /// <summary>Represents an empty value type.</summary>
        protected readonly struct None { }

        /// <summary>
        /// Instead of utility class to produce culture-oriented representation of an object as a string, does nothing.
        /// </summary>
        protected sealed class ToStringInstanceHelper
        {
            /// <summary>
            /// The singleton instance of the <see cref="ToStringInstanceHelper"/>.
            /// </summary>
            public static readonly ToStringInstanceHelper Instance = new();

            /// <summary>Does nothing, returns specified boolean as-is.</summary>
            /// <param name="value">The boolean value to convert.</param>
            /// <returns>The <paramref name="value"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool ToStringWithCulture(bool value) => value;

            /// <summary>Does nothing, returns specified character as-is.</summary>
            /// <param name="value">The character to convert.</param>
            /// <returns>The <paramref name="value"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public char ToStringWithCulture(char value) => value;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public byte ToStringWithCulture(byte number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public sbyte ToStringWithCulture(sbyte number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public short ToStringWithCulture(short number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ushort ToStringWithCulture(ushort number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int ToStringWithCulture(int number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public uint ToStringWithCulture(uint number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long ToStringWithCulture(long number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ulong ToStringWithCulture(ulong number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public float ToStringWithCulture(float number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public double ToStringWithCulture(double number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public decimal ToStringWithCulture(decimal number) => number;

            /// <summary>Does nothing, returns specified boolean as-is.</summary>
            /// <param name="value">The boolean value to convert.</param>
            /// <returns>The <paramref name="value"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool? ToStringWithCulture(bool? value) => value;

            /// <summary>Does nothing, returns specified character as-is.</summary>
            /// <param name="value">The character to convert.</param>
            /// <returns>The <paramref name="value"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public char? ToStringWithCulture(char? value) => value;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public byte? ToStringWithCulture(byte? number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public sbyte? ToStringWithCulture(sbyte? number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public short? ToStringWithCulture(short? number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ushort? ToStringWithCulture(ushort? number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int? ToStringWithCulture(int? number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public uint? ToStringWithCulture(uint? number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long? ToStringWithCulture(long? number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ulong? ToStringWithCulture(ulong? number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public float? ToStringWithCulture(float? number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public double? ToStringWithCulture(double? number) => number;

            /// <summary>Does nothing, returns specified number as-is.</summary>
            /// <param name="number">The number to convert.</param>
            /// <returns>The <paramref name="number"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public decimal? ToStringWithCulture(decimal? number) => number;

            /// <summary>Does nothing, returns specified string as-is.</summary>
            /// <param name="value">The string to convert.</param>
            /// <returns>The <paramref name="value"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public string? ToStringWithCulture(string? value) => value;

            /// <summary>Does nothing, returns specified object as-is.</summary>
            /// <param name="value">The object to convert.</param>
            /// <returns>The <paramref name="value"/> without any change.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public object? ToStringWithCulture(object? value) => value;

#if IS_T4_TEMPLATE_BASE
            /// <summary>Does nothing, used by <see cref="T4TemplateBase.Append(string?)"/> method.</summary>
            /// <param name="none">An empty value.</param>
            /// <returns>The <paramref name="none"/> without any change.</returns>
#else
            /// <summary>Does nothing, used by <see cref="CodeWriterBase.Append(string?)"/> method.</summary>
            /// <param name="none">An empty value.</param>
            /// <returns>The <paramref name="none"/> without any change.</returns>
#endif
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public None ToStringWithCulture(None none)
            {
                // Text was already been written using interpolated string handler
                return none;
            }
        }

        /// <summary>Represents a handler for interpolated string formatting.</summary>
        [InterpolatedStringHandler]
        protected readonly struct WriteInterpolatedStringHandler
        {
#if IS_T4_TEMPLATE_BASE
            private readonly T4TemplateBase _templateBase;
#else
            private readonly CodeWriterBase _templateBase;
#endif

            /// <summary>
            /// Initializes a new instance of the <see cref="WriteInterpolatedStringHandler"/> struct.
            /// </summary>
            /// <param name="literalLength">The length of the literal part of the interpolated string.</param>
            /// <param name="formattedCount">The number of formatted expressions in the interpolated string.</param>
            /// <param name="templateBase">The T4 template to append the formatted string to.</param>
#if IS_T4_TEMPLATE_BASE
            public WriteInterpolatedStringHandler(int literalLength, int formattedCount, T4TemplateBase templateBase)
#else
            public WriteInterpolatedStringHandler(int literalLength, int formattedCount, CodeWriterBase templateBase)
#endif
            {
                _templateBase = templateBase;
            }

            /// <summary>Appends the literal part of the interpolated string.</summary>
            /// <param name="s">The literal string to append.</param>
            public void AppendLiteral(string s)
            {
                _templateBase.Write(s);
            }

            /// <summary>Appends a formatted expression to the interpolated string.</summary>
            /// <typeparam name="T">The type of the value to format.</typeparam>
            /// <param name="value">The value to format and append.</param>
            public void AppendFormatted<T>(T value)
            {
                if (value is not null)
                    _templateBase.Write(value.ToString());
            }

            /// <summary>Appends a formatted boolean value to the interpolated string.</summary>
            /// <param name="value">The boolean value to append.</param>
            public void AppendFormatted(bool value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted character to the interpolated string.</summary>
            /// <param name="value">The character to append.</param>
            public void AppendFormatted(char value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(byte value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(sbyte value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(short value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(ushort value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(int value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(uint value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(long value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(ulong value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(float value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(double value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(decimal value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted boolean value to the interpolated string.</summary>
            /// <param name="value">The boolean value to append.</param>
            public void AppendFormatted(bool? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted character to the interpolated string.</summary>
            /// <param name="value">The character to append.</param>
            public void AppendFormatted(char? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(byte? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(sbyte? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(short? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(ushort? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(int? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(uint? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(long? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(ulong? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(float? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(double? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted number value to the interpolated string.</summary>
            /// <param name="value">The number value to append.</param>
            public void AppendFormatted(decimal? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a formatted string to the interpolated string.</summary>
            /// <param name="value">The string value to append.</param>
            public void AppendFormatted(string? value)
            {
                _templateBase.Write(value);
            }

            /// <summary>Appends a string representation of an object value to the interpolated string.</summary>
            /// <param name="value">The object value to append.</param>
            public void AppendFormatted(object? value)
            {
                _templateBase.Write(value);
            }
        }
    }
}
